import glob
import os
import librosa
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import specgram
from sklearn.model_selection import KFold
import librosa.display

import tensorflow as tf
from tensorflow import keras

%matplotlib inline
plt.style.use('ggplot')

def load_sound_files(file_paths):
    raw_sounds = []
    for fp in file_paths:
        X,sr = librosa.load(fp)
        raw_sounds.append(X)
    return raw_sounds

def plot_waves(sound_names,raw_sounds):
    i = 1
    fig = plt.figure(figsize=(19,10), dpi=300)
    for n,f in zip(sound_names,raw_sounds):
        plt.subplot(10,1,i)
        librosa.display.waveplot(np.array(f),sr=22050)
        plt.title(n.title())
        i += 1
    plt.suptitle('Figure 1: Waveplot',x=0.5, y=0.915,fontsize=18)
    plt.show()
    
def plot_specgram(sound_names,raw_sounds):
    i = 1
    fig = plt.figure(figsize=(12,10), dpi = 300)
    for n,f in zip(sound_names,raw_sounds):
        plt.subplot(10,1,i)
        specgram(np.array(f), Fs=22050)
        plt.title(n.title())
        i += 1
    plt.suptitle('Figure 2: Spectrogram',x=0.5, y=0.915,fontsize=18)
    plt.show()

    def plot_log_power_specgram(sound_names,raw_sounds): i = 1
    fig = plt.figure(figsize=(12,11), dpi = 300)
    for n,f in zip(sound_names,raw_sounds):
        plt.subplot(10,1,i)
        D = librosa.logamplitude(np.abs(librosa.stft(f))**2, ref_power=np.max)
        librosa.display.specshow(D,x_axis='time' ,y_axis='log')
        plt.title(n.title())
        i += 1
    plt.suptitle('Figure 3: Log power spectrogram',x=0.5, y=0.915,fontsize=18)
    plt.show()
    
# stft calculates spectral contrast
# mfccs is Mel-frequency cepstral coefficients
# chroma is chroma-stft which calculates a chromagram via power spectrogram/waveform
# mel is a melspectrogram which calculates a mel-scaled power spectrogram

def extract_feature(file_name):
    X, sample_rate = librosa.load(file_name)
    stft = np.abs(librosa.stft(X))
    mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40).T,axis=0)
    chroma = np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate).T,axis=0)
    mel = np.mean(librosa.feature.melspectrogram(X, sr=sample_rate).T,axis=0)
    contrast = np.mean(librosa.feature.spectral_contrast(S=stft, sr=sample_rate).T,axis=0)
    tonnetz = np.mean(librosa.feature.tonnetz(y=librosa.effects.harmonic(X), sr=sample_rate).T,axis=0)
    return mfccs,chroma,mel,contrast,tonnetz



def parse_audio_files(parent_dir,sub_dir,file_ext='*.wav'): 
  features, labels = np.empty((0,193)), np.empty(0) # 193 => total features 
  for fn in glob.glob(os.path.join(parent_dir, sub_dir, file_ext)):
      print (fn)
      try: 
        mfccs, chroma, mel, contrast,tonnetz = extract_feature(fn)
      except: 
        continue
      ext_features = np.hstack([mfccs,chroma,mel,contrast,tonnetz])
      features = np.vstack([features,ext_features])
      labels = np.append(labels, int(fn.split('/')[3].split('-')[1]))

  return np.array(features, dtype=np.float32), np.array(labels, dtype = np.int8)
